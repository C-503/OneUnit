// BSLLS-off
#Использовать asserts
#Использовать collectionos
#Использовать "../.."
#Использовать "."

&Пластилин
Перем ВспомогательныйМодуль;

&ПараметризованныйТест
&ИсточникЗначение(1, 2)
&ИсточникЗначение(3, 4)
&ИсточникЗначение(5, 6)
Процедура ИсточникЗначение(Параметр1, Параметр2) Экспорт
	ПроверитьСтандартныйПараметризованныйТест("ИсточникЗначение", Параметр1, Параметр2);
КонецПроцедуры

&ПараметризованныйТест
&ИсточникНеопределено
Процедура ИсточникНеопределено(Параметр1, Параметр2) Экспорт
	Ожидаем.Что(Параметр1).ЭтоНеопределено();
	Ожидаем.Что(Параметр2).ЭтоНеопределено();
КонецПроцедуры

&ПараметризованныйТест
&ИсточникJSON(
	"[
	|    {""Параметр1"": 1, ""Параметр2"": 2},
	|    {""Параметр2"": 4, ""Параметр1"": 3},
	|    {""Параметр1"": 5, ""Параметр2"": 6}
	|]"
)
Процедура ИсточникJSONЗначение(Параметр1, Параметр2) Экспорт
	ПроверитьСтандартныйПараметризованныйТест("ИсточникJSONЗначение", Параметр1, Параметр2);
КонецПроцедуры

&ПараметризованныйТест
&ИсточникJSON(Файл = "tests/fixtures/params.json")
Процедура ИсточникJSONФайл(Параметр1, Параметр2) Экспорт
	ПроверитьСтандартныйПараметризованныйТест("ИсточникJSONФайл", Параметр1, Параметр2);
КонецПроцедуры

&ПараметризованныйТест
&ИсточникПеречисление("СтатусСообщения")
Процедура ИсточникПеречислениеСистемное(ЗначениеПеречисления) Экспорт

	Ожидаем.Что(ЗначениеПеречисления).ИмеетТип("СтатусСообщения");

	ВспомогательныйМодуль.КоличествоВызововМетодов.Слить(
		"ИсточникПеречислениеСистемное",
		1,
		"Первый, Второй -> Первый + Второй"
	);

КонецПроцедуры

&ПараметризованныйТест
&ИсточникПеречисление("РезультатыВыполненияТестов")
Процедура ИсточникПеречислениеПользовательское(ЗначениеПеречисления) Экспорт

	Значения = Списки.ИзЭлементов(
		РезультатыВыполненияТестов.Ошибка,
		РезультатыВыполненияТестов.Успех
	);

	Ожидаем.Что(Значения.Содержит(ЗначениеПеречисления)).ЭтоИстина();

	ВспомогательныйМодуль.КоличествоВызововМетодов.Слить(
		"ИсточникПеречислениеПользовательское",
		1,
		"Первый, Второй -> Первый + Второй"
	);

КонецПроцедуры

&ПослеВсех
Процедура ПроверитьЧтоВсеЗначенияСистемногоПеречисленияПрошли() Экспорт

	Ожидаем.Что(ВспомогательныйМодуль.КоличествоВызововМетодов.ПолучитьИлиУмолчание("ИсточникПеречислениеСистемное", 0))
		.Равно(6);

КонецПроцедуры

&ПослеВсех
Процедура ПроверитьЧтоВсеЗначенияПользовательскогоПеречисленияПрошли() Экспорт

	Ожидаем.Что(ВспомогательныйМодуль.КоличествоВызововМетодов
		.ПолучитьИлиУмолчание("ИсточникПеречислениеПользовательское", 0))
		.Равно(2);

КонецПроцедуры

&ПараметризованныйТест
&ИсточникВыражение("() -> ПоставщикИсточникВыражение()")
Процедура ИсточникВыражение(Параметр1, Параметр2) Экспорт
	ПроверитьСтандартныйПараметризованныйТест("ИсточникВыражение", Параметр1, Параметр2);
КонецПроцедуры

Функция ПоставщикИсточникВыражение() Экспорт

	Возврат ПроцессорыКоллекций.ИзНабора(
		Списки.ИзЭлементов(1, 2),
		Списки.ИзЭлементов(3, 4),
		Списки.ИзЭлементов(5, 6)
	);

КонецФункции

Процедура ПроверитьСтандартныйПараметризованныйТест(ИмяМетода, Параметр1, Параметр2)

	Множитель = ВспомогательныйМодуль.КоличествоВызововМетодов.ПолучитьИлиУмолчание(ИмяМетода, 0);
	ВспомогательныйМодуль.КоличествоВызововМетодов.Слить(ИмяМетода, 1, "Первый, Второй -> Первый + Второй");

	Ожидаем.Что(Параметр1).Равно(1 + (2 * Множитель));
	Ожидаем.Что(Параметр2).Равно(2 + (2 * Множитель));

КонецПроцедуры

&ТестовыйНабор
&Порядок(6)
&Тег("Параметризованный")
Процедура ПриСозданииОбъекта()
КонецПроцедуры
