#Использовать fluent
#Использовать annotations
#Использовать collectionos
#Использовать lambdas

Перем _Поделка;
Перем _Рефлектор;

Функция ПредоставитьКонтекстыВызова(КонтекстРасширения) Экспорт

	ОтображаемоеИмя = КонтекстРасширения.ОтображаемоеИмя();
	ТестМетод       = КонтекстРасширения.ТестМетод();

	Аннотация = РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "ПараметризованныйТест");
	ШаблонИмени = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
		Аннотация,
		"Имя",
		"{Параметры}"
	);

	ШаблонИмени = СтрЗаменить(ШаблонИмени, "{ОтображаемоеИмя}", ОтображаемоеИмя);

	Возврат ПроцессорыКоллекций.ИзНабора(
		ПараметрыЗначения(КонтекстРасширения),
		ПараметрыНеопределено(КонтекстРасширения),
		ПараметрыJSON(КонтекстРасширения),
		ПараметрыПеречисление(КонтекстРасширения),
		ПараметрыВыражение(КонтекстРасширения)
	)
	.Развернуть("Процессор -> Процессор")
	.Обработать("Параметры -> {
		|	Имя = СтрЗаменить(ШаблонИмени, ""{Параметры}"", Параметры);
		|
		|	Возврат Поделка.НайтиЖелудь(""ОписаниеТеста"", Массивы.ИзЭлементов(Имя, Параметры));
		|}",
		Новый Структура("ШаблонИмени, Поделка", ШаблонИмени, _Поделка)
	);

КонецФункции

Функция ПараметрыЗначения(КонтекстРасширения)

	ТестМетод = КонтекстРасширения.ТестМетод();

	Возврат Массивы.КакСписок(РаботаСАннотациями.ПолучитьАннотации(ТестМетод, "ИсточникЗначение"))
		.ПроцессорКоллекции()
		.Обработать("Аннотация -> РаботаСАннотациями.ПолучитьЗначенияПараметровАннотации(Аннотация, ""Значение"")")
		.Обработать("Параметры -> Массивы.КакСписок(Параметры)");

КонецФункции

Функция ПараметрыНеопределено(КонтекстРасширения)

	ТестМетод = КонтекстРасширения.ТестМетод();

	Если РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "ИсточникНеопределено") <> Неопределено Тогда

		ЗначенияПараметров = Новый СписокМассив;
		ЗначенияПараметров.Вставить(ТестМетод.Параметры.Количество() - 1, Неопределено);

		Возврат ПроцессорыКоллекций.ИзНабора(ЗначенияПараметров);

	КонецЕсли;

	Возврат ПроцессорыКоллекций.ИзКоллекции(Новый Массив);

КонецФункции

Функция ПараметрыJSON(КонтекстРасширения)

	ТестМетод = КонтекстРасширения.ТестМетод();
	Аннотации = РаботаСАннотациями.ПолучитьАннотации(ТестМетод, "ИсточникJSON");

	Результат = Новый СписокМассив;

	Для каждого Аннотация Из Аннотации Цикл

		ЧтениеJSON = Новый ЧтениеJSON();

		Путь = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация, "Файл", "");

		Если ПустаяСтрока(Путь) Тогда
			ЧтениеJSON.УстановитьСтроку(РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация));
		Иначе
			ЧтениеJSON.ОткрытьФайл(Путь);
		КонецЕсли;

		Параметры = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Для Каждого ОписаниеПараметров Из Параметры Цикл

			ЗначенияПараметров = Новый СписокМассив;
			ЗначенияПараметров.Вставить(ТестМетод.Параметры.Количество() - 1, Неопределено);

			Для Каждого ИмяПараметраИЗначение Из ОписаниеПараметров Цикл

				СтрокаПараметр = ТестМетод.Параметры.Найти(ИмяПараметраИЗначение.Ключ, "Имя");
				Если СтрокаПараметр = Неопределено Тогда

					ВызватьИсключение СтрШаблон(
						"В методе %1, нет параметра с именем: %2",
						ТестМетод.Имя,
						ИмяПараметраИЗначение.Ключ
					);

				КонецЕсли;

				ЗначенияПараметров.Установить(ТестМетод.Параметры.Индекс(СтрокаПараметр), ИмяПараметраИЗначение.Значение);

			КонецЦикла;

			Результат.Добавить(ЗначенияПараметров);

		КонецЦикла;

	КонецЦикла;

	Возврат Результат.ПроцессорКоллекции();

КонецФункции

Функция ПараметрыПеречисление(КонтекстРасширения)

	ТестМетод = КонтекстРасширения.ТестМетод();

	Аннотации = РаботаСАннотациями.ПолучитьАннотации(ТестМетод, "ИсточникПеречисление");

	ЗначенияПараметров = Новый СписокМассив;

	Для каждого Аннотация Из Аннотации Цикл

		Перечисление = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация);
		Перечисление = Вычислить(Перечисление);

		Попытка

			Для Каждого Значение Из Перечисление Цикл // Системное перечисление можно обойти
				ЗначенияПараметров.Добавить(Значение);
			КонецЦикла;

		Исключение

			Свойства = _Рефлектор.ПолучитьТаблицуСвойств(Перечисление); // Пользовательское перечисление это поля в модуле

			Для Каждого Свойство Из Свойства Цикл
				ЗначенияПараметров.Добавить(_Рефлектор.ПолучитьСвойство(Перечисление, Свойство.Имя));
			КонецЦикла;

		КонецПопытки;

	КонецЦикла;

	Возврат ЗначенияПараметров.ПроцессорКоллекции()
		.Обработать("Значение -> Списки.ИзЭлементов(Значение);");

КонецФункции

Функция ПараметрыВыражение(КонтекстРасширения)

	ТестМетод = КонтекстРасширения.ТестМетод();
	ОпределениеТестовогоНабора = КонтекстРасширения.ОпределениеТестовогоНабора();

	Аннотации = РаботаСАннотациями.ПолучитьАннотации(ТестМетод, "ИсточникВыражение");

	Результат = Новый СписокМассив;

	Для каждого Аннотация Из Аннотации Цикл

		Результат.Добавить(
			Лямбда.Выражение(РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация))
				.Интерфейс(ФункциональныеИнтерфейсы.Вызываемый())
				.ЗахватитьОбъект(ОпределениеТестовогоНабора.ТестНабор())
				.ВДействие()
				.Выполнить()
		);

	КонецЦикла;

	Возврат Результат.ПроцессорКоллекции()
		.Развернуть("Элемент -> Элемент");

КонецФункции

&Желудь
Процедура ПриСозданииОбъекта(&Пластилин Поделка)
	_Поделка = Поделка;
	_Рефлектор = Новый Рефлектор();
КонецПроцедуры
