#Использовать async
#Использовать collectionos

Перем _Поделка;
Перем _СтандартныйПотокВывода;
Перем _СтандартныйПотокОшибок;
Перем _ПубликаторСобытий;

Процедура Исполнить(ТестПлан) Экспорт

    _ПубликаторСобытий.ОпубликоватьСобытие(ТестПлан, "ИсполнениеТестПланНачало", Новый Массив);

	Наборы = ТестПлан.Дети();

    Для Каждого Набор Из Наборы Цикл

        РезультатПропустить = ВыполнитьМетод(
            ЭтотОбъект,
            "ПропуститьНабор",
            Новый Массив(Массивы.ИзЭлементов(Набор)),
            0
        );

        Если Пропустить(Набор, РезультатПропустить) Тогда
            Продолжить;
        КонецЕсли;

        _ПубликаторСобытий.ОпубликоватьСобытие(Набор, "ИсполнениеТестНаборНачало", Новый Массив);

        РезультатВыполненияНабора = Новый Структура(
            "Результат, Причины, Вывод",
            РезультатыВыполненияТестов.Успех,
            Новый СписокМассив,
            ""
        );

        ОбъединитьРезультатыВыполнения(
            РезультатВыполненияНабора,
            ОбработатьСобытияНабора(Набор, Набор.ПередВсеми())
        );

        Для Каждого Тест Из Набор.Дети() Цикл
            ВыполнитьТест(Тест, Набор, РезультатВыполненияНабора);
        КонецЦикла;

        ОбъединитьРезультатыВыполнения(
            РезультатВыполненияНабора,
            ОбработатьСобытияНабора(Набор, Набор.ПослеВсех())
        );

        РезультатВыполненияНабора = _Поделка.НайтиЖелудь(
            "РезультатВыполненияТеста",
            Массивы.ИзЭлементов(
                РезультатВыполненияНабора.Результат,
                РезультатВыполненияНабора.Причины,
                РезультатВыполненияНабора.Вывод
            )
        );

        _ПубликаторСобытий.ОпубликоватьСобытие(
            Набор,
            "ИсполнениеТестНаборКонец",
            Массивы.ИзЭлементов(РезультатВыполненияНабора)
        );

    КонецЦикла;

    _ПубликаторСобытий.ОпубликоватьСобытие(ТестПлан, "ИсполнениеТестПланКонец", Новый Массив);

КонецПроцедуры

Функция ОбработатьСобытияНабора(Набор, События)

    Результат = Новый Структура(
        "Результат, Причины, Вывод",
        РезультатыВыполненияТестов.Успех,
        Новый СписокМассив,
        ""
    );

    ТестНабор = Набор.ТестНабор();

    Для Каждого ИмяМетода Из События Цикл

        ОбъединитьРезультатыВыполнения(
            Результат,
            ВыполнитьМетод(
                ТестНабор,
                ИмяМетода,
                Новый Массив,
                Набор.Таймаут()
            )
        );

    КонецЦикла;

    Возврат Результат;

КонецФункции

Процедура ВыполнитьТест(Тест, ОпределениеТестНабора, РезультатВыполненияНабора)

    РезультатПропустить = ВыполнитьМетод(
        ЭтотОбъект,
        "ПропуститьТест",
        Новый Массив(Массивы.ИзЭлементов(Тест, ОпределениеТестНабора, РезультатВыполненияНабора)),
        0
    );

    Если Пропустить(Тест, РезультатПропустить) Тогда
        Возврат;
    КонецЕсли;

    Если Тест.ТипОпределения() = ТипыОпределенийТестов.Контейнер Тогда

        _ПубликаторСобытий.ОпубликоватьСобытие(Тест, "ИсполнениеТестНачало", Новый Массив);

        Для Каждого ВложенныйТест Из Тест.Дети() Цикл
            ВыполнитьТест(ВложенныйТест, ОпределениеТестНабора, РезультатВыполненияНабора);
        КонецЦикла;

        // Контейнер всегда зелёный
        Результат = _Поделка.НайтиЖелудь(
            "РезультатВыполненияТеста",
            Массивы.ИзЭлементов(
                РезультатыВыполненияТестов.Успех,
                Списки.ИзЭлементов(),
                ""
            )
        );

        _ПубликаторСобытий.ОпубликоватьСобытие(Тест, "ИсполнениеТестКонец", Массивы.ИзЭлементов(Результат));

        Возврат;

    КонецЕсли;

    _ПубликаторСобытий.ОпубликоватьСобытие(Тест, "ИсполнениеТестНачало", Новый Массив);

    РезультатВыполнения = Новый Структура(
        "Результат, Причины, Вывод",
        РезультатыВыполненияТестов.Успех,
        Новый СписокМассив,
        ""
    );

    ТестНабор = ОпределениеТестНабора.ТестНабор();

    Для Каждого ИмяМетода Из ОпределениеТестНабора.ПередКаждым() Цикл

        ОбъединитьРезультатыВыполнения(
            РезультатВыполнения,
            ВыполнитьМетод(
                ТестНабор,
                ИмяМетода,
                Новый Массив,
                ОпределениеТестНабора.Таймаут()
            )
        );

    КонецЦикла;

    Если РезультатВыполнения.Результат <> РезультатыВыполненияТестов.Ошибка Тогда

        ОбъединитьРезультатыВыполнения(
            РезультатВыполнения,
            ВыполнитьМетод(
                ТестНабор,
                Тест.ИмяМетода(),
                Тест.Параметры().ВМассив(),
                Тест.Таймаут()
            )
        );

    КонецЕсли;

    Для Каждого ИмяМетода Из ОпределениеТестНабора.ПослеКаждого() Цикл

        ОбъединитьРезультатыВыполнения(
            РезультатВыполнения,
            ВыполнитьМетод(
                ТестНабор,
                ИмяМетода,
                Новый Массив,
                ОпределениеТестНабора.Таймаут()
            )
        );

    КонецЦикла;

    Результат = _Поделка.НайтиЖелудь(
        "РезультатВыполненияТеста",
        Массивы.ИзЭлементов(
            РезультатВыполнения.Результат,
            РезультатВыполнения.Причины,
            РезультатВыполнения.Вывод
        )
    );

    _ПубликаторСобытий.ОпубликоватьСобытие(Тест, "ИсполнениеТестКонец", Массивы.ИзЭлементов(Результат));

КонецПроцедуры

Функция ВыполнитьМетод(Объект, ИмяМетода, Параметры, Таймаут)

    Делегат   = Новый Действие(Объект, ИмяМетода);

    Результат = РезультатыВыполненияТестов.Успех;
    Причина   = "";

    ПотокВывода = Новый ПотокВПамяти();
    Консоль.УстановитьПотокВывода(ПотокВывода);
    Консоль.УстановитьПотокОшибок(ПотокВывода);

    Попытка
        РезультатВыполненияМетода = Обещания.ВыполнитьДелегат(Делегат, Параметры, Истина)
            .Получить(Таймаут);
    Исключение
        Результат = РезультатыВыполненияТестов.Ошибка;
        Причина   = ИнформацияОбОшибке();
    КонецПопытки;

    Консоль.УстановитьПотокВывода(_СтандартныйПотокВывода);
    Консоль.УстановитьПотокОшибок(_СтандартныйПотокОшибок);

    Возврат Новый Структура(
        "Результат, Причины, Вывод, РезультатВыполненияМетода",
        Результат,
        Списки.ИзЭлементов(Причина),
        ПрочитатьВывод(ПотокВывода),
        РезультатВыполненияМетода
    );

КонецФункции

Функция ПрочитатьВывод(Поток)

    Поток.СброситьБуферы();
    Поток.Перейти(0);

    ЧтениеТекста = Новый ЧтениеТекста();
    ЧтениеТекста.Открыть(Поток, Консоль.КодировкаВходногоПотока);
    Результат = ЧтениеТекста.Прочитать();

    ЧтениеТекста.Закрыть();
    Поток.Закрыть();

    Возврат Результат;

КонецФункции

Функция Пропустить(Определение, РезультатПропустить)

    Пропустить = Ложь;

    Если ТипЗнч(Определение) = Тип("ОпределениеТеста") Тогда
        СобытиеНачало  = "ИсполнениеТестНачало";
        СобытиеКонец   = "ИсполнениеТестКонец";
        СобытиеПропуск = "ИсполнениеТестПропущен";
    Иначе
        СобытиеНачало  = "ИсполнениеТестНаборНачало";
        СобытиеКонец   = "ИсполнениеТестНаборКонец";
        СобытиеПропуск = "ИсполнениеТестНаборПропущен";
    КонецЕсли;

    Если РезультатПропустить.Результат = РезультатыВыполненияТестов.Ошибка Тогда

        Пропустить = Истина;

        Результат = _Поделка.НайтиЖелудь(
            "РезультатВыполненияТеста",
            Массивы.ИзЭлементов(
                РезультатыВыполненияТестов.Ошибка,
                РезультатПропустить.Причины,
                РезультатПропустить.Вывод
            )
        );

        _ПубликаторСобытий.ОпубликоватьСобытие(Определение, СобытиеНачало, Новый Массив);
        _ПубликаторСобытий.ОпубликоватьСобытие(Определение, СобытиеКонец, Массивы.ИзЭлементов(Результат));

    Иначе

        Пропустить = РезультатПропустить.РезультатВыполненияМетода.Пропустить;

        Если Пропустить Тогда

            _ПубликаторСобытий.ОпубликоватьСобытие(
                Определение,
                СобытиеПропуск,
                Массивы.ИзЭлементов(РезультатПропустить.РезультатВыполненияМетода.Причина)
            );

        КонецЕсли;

    КонецЕсли;

    Возврат Пропустить;

КонецФункции

Функция ПропуститьНабор(ОпределениеТестНабора) Экспорт

    Результат = Новый Структура("Пропустить, Причина", Ложь, "");

    Причина = ОпределениеТестНабора.Условия()
        .ПроцессорКоллекции()
        .Обработать("Условие -> Условие.Выполнять(ТестНабор)",
            Новый Структура("ТестНабор", ОпределениеТестНабора.ТестНабор()))
        .Фильтровать("Выполнять -> Выполнять.Результат = Ложь")
        .Обработать("Выполнять -> Выполнять.Причина")
        .ПолучитьПервый();

    Если ЗначениеЗаполнено(Причина) Тогда

        Результат.Пропустить = Истина;
        Результат.Причина    = Причина;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция ПропуститьТест(ОпределениеТеста, ОпределениеТестНабора, РезультатВыполненияНабора) Экспорт

    Результат = Новый Структура("Пропустить, Причина", Ложь, "");

    Если РезультатВыполненияНабора.Результат <> РезультатыВыполненияТестов.Успех Тогда

        Результат.Пропустить = Истина;
        Результат.Причина    = "Пропущен из-за состояния набора " + РезультатВыполненияНабора.Результат;

    КонецЕсли;

    Причина = ОпределениеТеста.Условия()
        .ПроцессорКоллекции()
        .Обработать("Условие -> Условие.Выполнять(ТестНабор)",
            Новый Структура("ТестНабор", ОпределениеТестНабора.ТестНабор()))
        .Фильтровать("Выполнять -> Выполнять.Результат = Ложь")
        .Обработать("Выполнять -> Выполнять.Причина")
        .ПолучитьПервый();

    Если ЗначениеЗаполнено(Причина) Тогда

        Результат.Пропустить = Истина;
        Результат.Причина    = Причина;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Процедура ОбъединитьРезультатыВыполнения(Первый, Второй)

    Если Второй.Результат = РезультатыВыполненияТестов.Ошибка Тогда
        Первый.Результат = РезультатыВыполненияТестов.Ошибка;
        Первый.Причины.ДобавитьВсе(Второй.Причины);
    КонецЕсли;

    Первый.Вывод = Первый.Вывод + Второй.Вывод;

КонецПроцедуры

&Желудь
&Прозвище("ИсполнительТестов")
Процедура ПриСозданииОбъекта(
    &Пластилин Поделка,
    &Пластилин ПубликаторСобытий)

    _Поделка                = Поделка;
    _ПубликаторСобытий      = ПубликаторСобытий;
    _СтандартныйПотокВывода = Консоль.ОткрытьСтандартныйПотокВывода();
    _СтандартныйПотокОшибок = Консоль.ОткрытьСтандартныйПотокОшибок();

КонецПроцедуры
